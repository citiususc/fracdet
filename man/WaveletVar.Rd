% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/WaveletVar.R
\name{WaveletVar}
\alias{WaveletVar}
\alias{WaveletVar.numeric}
\alias{WaveletVar.wd}
\alias{resolutionLevels}
\alias{wtInfo}
\title{Wavelet coefficients' variance depending on the resolution level}
\usage{
WaveletVar(x, ...)

\method{WaveletVar}{numeric}(x, family, filter_number)

\method{WaveletVar}{wd}(x)

resolutionLevels(x)

wtInfo(x)
}
\arguments{
\item{x}{Either a numeric vector or a \code{wd} object (see
\code{\link[wavethresh]{wd}}). If \code{x} is a numeric vector, it should
contain the wavelet coefficients' variance on each wavelet resolution level
(resolution levels are assumed to be arranged in ascending order). If
\code{x} is a \code{wd} object, the wavelet coefficients' variance is computed
before constructing the \code{WaveletVar} object.}

\item{...}{Additional arguments.}

\item{family}{Specifies the family of wavelets used in the computation of the
wavelet transform. See \code{\link[wavethresh]{wd}}.}

\item{filter_number}{An integer identifying the concrete filter used within the
\code{family} of wavelets selected. \code{filter_number} is related with the
smoothness of the wavelet. See \code{\link[wavethresh]{wd}}.}
}
\value{
An S3 \code{WaveletVar} object that stores the
Wavelet coefficients' variance depending on the resolution level.
}
\description{
Wavelet coefficients' variance depending on the resolution level
}
\section{Methods}{

\code{resolutionLevels}: Get the resolution levels.


\code{wtInfo}: Get the family and the filter-number used in the
 wavelet transform asociated with the object. Returns a list with the proper
 wavelet information.
}
\examples{
use_H = 0.3
fbm = fbmSim(n = 2 ^ 10, H = use_H)
w_fbm = wd(fbm, bc = "symmetric")
vpr = WaveletVar(w_fbm)
plot(vpr)
# the theoreticalWaveletVar also returns a 'WaveletVar' object:
theo_vpr = theoreticalWaveletVar(H = use_H, sigma2 = 1,
                                 family = wtInfo(vpr)[["family"]],
                                 filter_number = wtInfo(vpr)[["filter_number"]],
                                 nlevels = length(vpr))
points(theo_vpr, col = "red")
}

